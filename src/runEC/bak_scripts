#                print('Skipped, Too few files (%s) in %s. Skipped' %(len(gr),exp_dir))
    @staticmethod
    def old_EC_Analysis_Run_groups(run_group, **run_kwargs):
#        EC_index = kwargs.get('EC_index',pd.DataFrame())
#        EC_run_groupby = kwargs.get('EC_run_groupby',[])
#        dest_dir = arg.grp.Dest_dir.unique()[0]
#        exp_dir= arg.EXP_dir
        skip = ECRunOVV.check_skip(run_group,**run_kwargs)
#        gr,exp_dir = test1.groupby(by=['EXP_date']).get_group('2019-07-19 00:00:00'), test1.EXP_dir.unique()[1]
        if skip == False:
            results = []
            try:
                ovv = ECRunOVV.MakeOVVperExpDir(run_group)
            except Exception as e:
                ovv = run_group.grp
                logger.error('EC_Analysis_Run_Date ovv preparation fail: {0}\n because {1}'.format(run_group.EXP_dir,e))
            try:
                results = []
                results = ECRunOVV().OVV_loop(ovv, **run_kwargs)
                if results:
                    prepare_input.MainEC.MergeIndexOvv(results,ovv)
                    logger.info('EC_Analysis_Run_Date Success Index: {0}'.format())
                else:
                    logger.warning('EC_Analysis_Run_Date Fail for empty results: {0}, {1}'.format(results, run_group.EXP_dir))
                # TODO :EC_Analysis_Run_Date Fail for empty results/Index:
            except Exception as e:
                logger.warning('EC_Analysis_Run_Date OVV loop Fail: {0}\n because {1}'.format(run_group.EXP_dir,e))
    #                with multiprocessing.Pool(os.cpu_count()-1) as pool:
    #                    try:
    #                        results = pool.map( ECRunOVV.OVV_loop, ovv)
    #                    except Exception as e:
    #                        print('PAR DW Classifier multiprocessing error: {0}'.format(e))
    #                        logger.error('PAR DW Classifier multiprocessing error: {0}'.format(e))
    ##                    results = pool.map(EC_classifier_multi_core.EC_PAR_file_check, FolderOrganizing.FileHelper.FindExpFolder('VERSASTAT').PARfiles)
    #                out.append(results)
    #                print('Success: ', exp_dir)

#
#            except Exception as e:
#                logger.warning('EC_Analysis_Run_Date Fail: {0}\n because {1}'.format(run_group.EXP_dir,e))
#        print(results)
        return results

###### === EC Analysis Run over test1 grouped by Date ovv and loop over PAR_exp types ==== #######
    @staticmethod
    def old_OVV_loop(ovv, **run_kwargs):
        '''Start of Main Analysis Loop Where Each Type of Experiment from OVV is processed
            and index files for output are collected ==== #######  '''
#        ovv = test1
        if 'PAR_exp' in ovv.columns:
#            index_info = []
#            ovv_Dest_dir =  Path(ovv.Dest_dir.unique()[0])
            ExpTypes_gr = ovv.groupby(by='PAR_exp')
            for exp,gr_ovv in ExpTypes_gr:
                logger.info('OVV loop starting: {0}'.format(exp))
                index = pd.DataFrame()
                if 'N2_act' in exp:
#                    print('N2_act_SKIP')
                    index = ECRunOVV.N2_act(ovv)
                    index['Script_run_date'] = pd.datetime.now()
                    index_info.append(index)
                elif 'EIS' in exp:
#                    EIS_kwargs = {'EIS_skip_set' : False, 'EIS_use_prepars_set' : True, 'FreqLim_set' : 30E3}
                    EIS_kwargs = dict(EIS_skip_set = False,EIS_use_prepars_set = True, FreqLim = 100E4,
                                      EIS_plot_combined=True, EIS_single_output = 'Text,Plot',
                                      perform_prefit = True, TrimData = False, FitOnlyTrimmedData = False, linKK_trimming_factor = 2.1,
                                      export_raw_data = True)
                    EIS_kwargs.update(run_kwargs)
                    print(f'Skip EIS: {EIS_kwargs["EIS_skip_set"]}. Use prePars: {EIS_kwargs["EIS_use_prepars_set"]}, Frequency limit: {EIS_kwargs["FreqLim"]:.0f}')
#                    exp, gr = 'EIS', ExpTypes_gr.get_group('EIS')
                    if EIS_kwargs.get('EIS_skip_set',False) == False:
                        eis_run_ovv.eis_run_group_ovv(exp,gr_ovv,ovv,**EIS_kwargs )
#                        ovv_Dest_dir.joinpath('{})
#                        index_info.append(index)
                elif 'HPRR' in exp:
#                    print('HPRR_skip')
#                    print('Skip EIS: %s. Use prePars: %s\n Frequency limit: %.0f'%(EIS_skip,EIS_use_prepars,FreqLim_set))
#                    if EIS_skip == False:
                    index = ECRunOVV.HPRR(exp,ExpTypes_gr.get_group('HPRR'),ovv)
                    index['Script_run_date'] = pd.datetime.now()
                    index_info.append(index)
                elif 'OER' in exp:
                    index = ECRunOVV.OER(exp,ExpTypes_gr.get_group('OER'),ovv)
                    index['Script_run_date'] = pd.datetime.now()
                    index_info.append(index)
                elif 'HER' in exp:
                    index = ECRunOVV.HER(exp,ExpTypes_gr.get_group('HER'),ovv)
                    index['Script_run_date'] = pd.datetime.now()
                    index_info.append(index)

                elif 'ORR' in exp or 'O2_nan' in exp:
                    index = ECRunOVV.ORR(ovv)
                    index['Script_run_date'] = pd.datetime.now()
                    index_info.append(index)

                elif 'RHE' in exp:
                    pass
                else:
#                    print('No run, unknown experiment type:', exp)
                    logger.info('No run, unknown experiment type: {0}'.format(exp))
#                Index_exp = pd.concat([i for i in index_info],ignore_index=True,sort=False)
#                index_local_exp_path = ovv_Dest_dir.joinpath('index_{0}.xlsx'.format(exp))
#                index_local_exp_target = FileOperations.CompareHashDFexport(Index_exp,index_local_exp_path)
#                index_folder_exp_path = FindExpFolder('VERSASTAT').IndexDir.joinpath(ovv_Dest_dir.name + '_index_{0}_{1}.xlsx'.format(exp,len(ovv)))
#                index_folder_exp_target = FileOperations.CompareHashDFexport(Index_exp,index_folder_exp_path)
#           logger.info('Main OVV loop,  Index  saved local to: {0}\n and in general Folder to '.format(index_local_exp_target,index_folder_exp_target))
#            pd.concat([pd.DataFrame(i,index=[0]) for i in index_out],ignore_index=True,sort=False)
#            Index = pd.concat([i for i in index_info],ignore_index=True,sort=False)
#            index_local_path = ovv_Dest_dir.joinpath('index.xlsx')

#            if not Index.empty:
#            Index.to_excel(index_local_path)
#            Index.to_excel(index_folder_path)
            logger.info('Main OVV loop finisihed')
        else:
            print('Your overview does not contain a PAR_exp column')
            logger.error('Your overview does not contain a PAR_exp column: {0}'.format(Path(ovv.PAR_file.iloc[0]).parent))
            index_folder_exp_target = []
        return index_folder_exp_target
